// Code generated by sqlc. DO NOT EDIT.
// source: order.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createOrders = `-- name: CreateOrders :one
INSERT INTO orders (
  trx_id,
  payment_trx_id,
  lock_items,
  status,
  customer_name,
  customer_address
)
VALUES (
  $1,
  $2,
  $3,
  $4,
  $5,
  $6
)
RETURNING id
`

type CreateOrdersParams struct {
	TrxID           string      `json:"trx_id"`
	PaymentTrxID    string      `json:"payment_trx_id"`
	LockItems       pgtype.JSON `json:"lock_items"`
	Status          string      `json:"status"`
	CustomerName    string      `json:"customer_name"`
	CustomerAddress string      `json:"customer_address"`
}

func (q *Queries) CreateOrders(ctx context.Context, arg CreateOrdersParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrders,
		arg.TrxID,
		arg.PaymentTrxID,
		arg.LockItems,
		arg.Status,
		arg.CustomerName,
		arg.CustomerAddress,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createOrdersDetail = `-- name: CreateOrdersDetail :one
INSERT INTO order_detail (
  order_id,
  name,
  quantity,
  price
)
VALUES (
  $1,
  $2,
  $3,
  $4
)
RETURNING id
`

type CreateOrdersDetailParams struct {
	OrderID  int32          `json:"order_id"`
	Name     string         `json:"name"`
	Quantity int32          `json:"quantity"`
	Price    pgtype.Numeric `json:"price"`
}

func (q *Queries) CreateOrdersDetail(ctx context.Context, arg CreateOrdersDetailParams) (int32, error) {
	row := q.db.QueryRow(ctx, createOrdersDetail,
		arg.OrderID,
		arg.Name,
		arg.Quantity,
		arg.Price,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const orderPlaced = `-- name: OrderPlaced :one
UPDATE orders SET
  status = $1
WHERE payment_trx_id = $2
RETURNING id AS res
`

type OrderPlacedParams struct {
	Status       string `json:"status"`
	PaymentTrxID string `json:"payment_trx_id"`
}

func (q *Queries) OrderPlaced(ctx context.Context, arg OrderPlacedParams) (int32, error) {
	row := q.db.QueryRow(ctx, orderPlaced, arg.Status, arg.PaymentTrxID)
	var res int32
	err := row.Scan(&res)
	return res, err
}

const selectPayloads = `-- name: SelectPayloads :one
SELECT id, lock_items 
FROM orders
WHERE payment_trx_id = $1
`

type SelectPayloadsRow struct {
	ID        int32       `json:"id"`
	LockItems pgtype.JSON `json:"lock_items"`
}

func (q *Queries) SelectPayloads(ctx context.Context, paymentTrxID string) (SelectPayloadsRow, error) {
	row := q.db.QueryRow(ctx, selectPayloads, paymentTrxID)
	var i SelectPayloadsRow
	err := row.Scan(&i.ID, &i.LockItems)
	return i, err
}
